In this video, I want to add in a couple little notes around syntax of interfaces.So once again, when we define an interface, we're going to list out all the different property names\n\nand types that we expect, something that is a vehicle to have.\n\nWe are not only limited to expressing primitive values inside of here, we can instead express any different\n\ntype we want to inside of an interface.\n\nSo, for example, let's say instead of the year property being a number, we instead want this to be\n\na more complex object, like an instance of a date to do so.\n\nI'm going to replace no with simply date like so now in order for old Civic to be considered to be a\n\nvehicle, you'll notice that we've got an area down here.\n\nWe have to update its definition.\n\nSo instead of your being a simple number, I'm going to instead assignment an instance of a date like\n\nso as soon as I do so, that area down here goes away.\n\nSo once again, we are not limited to just basic values or primitive values inside of an interface definition.\n\nWe can assign any type inside there that we want.\n\nThat also includes functions, so let's say that we want to say that in order for old Civic to be considered\n\nto be a vehicle, we want it to also have a function called summary.\n\nSo in other words, I want this object right here to have a property or a function called summary.\n\nAnd if we call it maybe it should return a string that summarizes some different facts about the vehicle.\n\nTo express that, I'm going to add in another property on vehicle.\n\nCalled summary like so.\n\nAnd then instead of immediately putting in a set or a comma or see a colon right there, I'll put in\n\na set of parentheses and then a colon right after it.\n\nAnd I'm going to label what I would expect the summary function to return.\n\nSo in this case, maybe it's going to return a string that summarizes some different facts about the\n\ncar.\n\nSo this right here says that anything that wants to be a vehicle has to have a function called summary\n\nthat returns a string.\n\nIf we then go back down to the bottom again, you'll notice we have an area down here as well.\n\nSo now it says that we do not have a summer property inside of old Civic.\n\nSo to fix this up, we would have to add in a summary function that satisfies this type right here.\n\nSo it has to be a function with no arguments.\n\nThat returns a string and so we can add it on like so.\n\nSo now to return some information about this vehicle, we could return about like.\n\nName.\n\nIs this name like so and again, notice the yes, 2015 tablets drink here, so I am using tactics.\n\nSo now that my object has a summary function that returns a string, it once again qualifies as being\n\na vehicle.\n\nSo if I go back down to the bottom of the pile again, that air has now gone away and now inside of\n\nmy print vehicle function, rather than trying to pull off all these different properties one by one,\n\nI can instead rely upon that summary function.\n\nSo I can call something like console that log.\n\nVehicle dot summary like so.\n\nCool.\n\nAll right, so again, just two notes here.\n\nFirst off, we can use any type inside of our interface definition we want.\n\nWe are not limited just to primitive values.\n\nSecond important note is that inside of our interface definition, we can express functions inside there\n\nas well.\n\nSo let's take a quick pause right here in the next video, I want to share two more important notes\n\nwith you around basic syntax of interfaces.\n\nA quick pause and I'll see you in just a minute.