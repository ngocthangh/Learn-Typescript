40. Fixing Long Annotations with Interfaces
In the last video, he wrote out a little bit of code, but it's got one little issue.We've got a really long type annotation on this function right here.\n\nI think you can easily imagine that if we had several other functions inside this file that all expected\n\nto be called with old Civic, we would have to repeat this type annotation right here several times\n\nover and it would be a lot of duplicate code.\n\nSo to fix this, we're going to create an interface inside this file.\n\nI'm going to go up to the very top and I'm going to define an interface by writing out the interface\n\nkeyword and then a name for the new type that I am creating.\n\nRemember, any time we create an interface, we are creating a new type, a type in the same way that\n\na number is a type or a string or boolean or so on.\n\nSo I cannot create an interface called vehicle.\n\nWhenever we create an interface, we're always going to use a capital letter on the leading edge of\n\nthe word.\n\nYou'll also know some using kind of a generic term right here, so I'm not creating an interface called\n\nlike Civic or an interface called old civic or new civic or anything like that.\n\nInstead, I'm creating a very generic name right here to describe what different properties a vehicle\n\nmight have.\n\nSo then inside these curly braces, I'm going to list out the different property names that I expect\n\nan object that is a vehicle to have and they're different types.\n\nSo in order to be a vehicle, you must have a name property that is a string.\n\nYou must have a year property that is a number, and you must have a broken property that is a boolean\n\nlike so.\n\nSo once again, we have now created a new type inside of our application called vehicle, and in order\n\nto be a vehicle, you have to have these properties and they must have these different types.\n\nSo we can now think of vehicle right here as being kind of like a variable of sorts that refers to a\n\ntype, so rather than riding out this really long form type annotation right here, I can delete that\n\nfull annotation and replace it with just a vehicle like so.\n\nSo what are we saying here by putting this code in, we are now saying that in order to call it a print\n\nvehicle function, you must pass in an object that meets the specifications provided by the vehicle\n\ninterface.\n\nIn other words, to call this function, you must provide an object that has a name that is a string\n\na year that is a number and broken.\n\nThat is a boolean.\n\nThe old civic object satisfies each of those requirements.\n\nIt has a name that's a string year that's a number and broken, that is a boolean.\n\nSo we are allowed to pass an old civic to print vehicle.\n\nYou'll notice that down here where we actually call a print vehicle, there is no air and no warning\n\nor anything like that.\n\nSo as soon as we added in the statement, TypeScript did a little bit of checking for us, a little\n\nprocess went on behind the scenes.\n\nTypeScript took a look at the argument we provided and it said, OK, we need to look at that old civic\n\nobject and make sure that it satisfies this interface.\n\nWe need to make sure that old civic has all the appropriate property names and types.\n\nAnd so behind the scenes, typescript, loop through all these different properties and made sure that\n\nold Civic had each of those different property names and the appropriate value for each one.\n\nIf I change any of these types right here and assign a different type, let's let's say instead of broken,\n\nI'm going to put in like just a one like.\n\nSo as soon as I do that, you'll notice we get an error message down here.\n\nSo TypeScript is telling us that in order to pass an old civic, we have to have a broken property that\n\nis a boolean, but we have a broken property that is a number, and that's why we're seeing an error.\n\nSo if I change that one back to true, everything works again.\n\nLikewise, if I misspell any of the property names inside the subject, like, let's say, is broken\n\ninstead.\n\nNow our object can no longer be considered to be a vehicle.\n\nRemember to be a vehicle.\n\nWe have to have a broken property.\n\nBut I provide a property that is is broken because those property names are different.\n\nTypeScript will not allow me to pass in old Civic into the print vehicle function.\n\nAnd if I hover over that air right there, it's going to tell me very plainly down towards the bottom\n\nof this air right here, it says Property broken is not present inside the object I provided, but it\n\nis required to be a vehicle.\n\nSo once again, if I change is broken back over to broken, everything works again.\n\nOK, so this right here is some of the like very basic interaction or definition of what an interface\n\nis.\n\nSo let's take a quick pause right here.\n\nWe're going to come back to the next video and start to expand on this example just a little bit more.